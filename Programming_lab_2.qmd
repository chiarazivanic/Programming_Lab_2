---
title: "Programming_Lab_2"
author: "Zivanic, Lugli, Battaglio"
format: html
editor: visual
---

# Gender pay gap

```{r}

library(readr)
library(tidyverse)
library(gapminder)
library(ggplot2)
library(dplyr)
library(knitr)
library(broom)
library(magrittr)
library(knitr)
library(plotly)

getwd()

#setwd("C:/Users/SAMSUNG PC/OneDrive/uni/programminglab2/progetto_esame")
paygap <- read.csv("pay_gap_Europe.csv")
view(paygap)

```

```{r}
head(paygap)
summary(paygap$GDP)

paygapEU <- paygap |> filter(Country %in% c("Italy", "Switzerland", "Bulgaria")) |> select(-c(Industry, Electricity_supply, Water_supply, Retail.trade, Transportation, Accommodation, Information, Financial, Professional_scientific, Administrative, Public_administration, Human_health, Arts, Other))

paygapEU <- paygapEU |> mutate(Secondary_sector = rowMeans(select(paygapEU, Construction, Mining, Manufacturing), na.rm=TRUE))

# Execute the linear regression
lin_mod1 <- lm(Secondary_sector ~ GDP, data = paygapEU)
summary(lin_mod1)

# Create the plot using ggplot2
ggplot(paygapEU, aes(x = GDP, y = Secondary_sector, color = Country)) +
  geom_point(alpha = 0.5) +  
  geom_smooth(data = paygapEU, method = "lm", se = TRUE, aes(fill = Country), alpha = 0.2) +  
  geom_line(data = data.frame(GDP = unique(paygapEU$GDP), predictions = predict(lin_mod1, newdata = data.frame(GDP = unique(paygapEU$GDP)))), 
            aes(x = GDP, y = predictions), color = "black", size = 1) +  
  labs(title = "Regressione di Secondary_sector su GDP",
       x = "GDP",
       y = "Secondary Sector") +
  theme_minimal()

summary(lin_mod1)

# Unfortunately, the coefficient on GDP is very small (0.00002511), and even the p value is very high (0.394), so that we can not know for sure the dimension of the causality effect. We try adding some more regressors.

lin_mod2 <- lm(Secondary_sector ~ GDP + Year + Urban_population, data=paygapEU)
summary(lin_mod2)

```
Again, the coefficient on GDP is quite similar as before, still very small and negligible. As concerns the other two regressors, for a 1% increase in urban population the pay gap decreases by 0.3398, and as years go by pay gap decreases by 0.357 every year. It is to note, however, that these values are not statistically significant, as the p value is again very large (only for the coefficient on the year variable, we can confide in its significance but at a 10% significance level).


#Alessia

```{r}
paygapEU <- paygapEU |> 
  mutate(Tertiary_sector = rowMeans(select(paygapEU, Business, Real.estate, Education), na.rm=TRUE))

```


We now create a linear regression between GDP and the Tertiary sector. The GPD represents the independent variable while the Tertiary sector represents the dependent one. Lastly, we plot the regression and the line of fit, to help us better understand the relation between these two variables.

Linear regression between GDP and tertiary sector

```{r}
lin_reg <- lm(Tertiary_sector ~ GDP, data = paygapEU)
lin_reg
```


Plot of the regression
```{r}
countries_to_plot <- c("Italy", "Switzerland", "Bulgaria")
df_filtered <- paygapEU %>% 
  filter(Country %in% countries_to_plot)

ggplot(df_filtered, aes(x = GDP, y = Tertiary_sector, color = Country)) +
  geom_point() +  
  geom_smooth(method = "lm", se = FALSE) +  
  geom_line(data = data.frame(GDP = unique(paygapEU$GDP), predictions = predict(lin_reg, newdata = data.frame(GDP = unique(paygapEU$GDP)))), 
            aes(x = GDP, y = predictions), color = "black", size = 1) +  
  labs(title = "Regression between the tertiary sector in GDP",
       x = "GDP",
       y = "Tertiary Sector") +
  theme_minimal()

summary(lin_reg)
```



# Milena

### upload the new dataset and section it

```{r}
management <- read.csv("Employment in senior and middle management, female (%).csv")
#view(management)
```

#### new variable european countries

```{r}
all_countries <- unique(management$Country.Name)
#print useful to get the complete list of european countries
print(all_countries)
# List of European countries
european_countries <- c(
    "Albania", "Austria", "Belarus", "Belgium", "Bosnia and Herzegovina", "Bulgaria", 
    "Croatia", "Cyprus", "Czechia", "Denmark", "Estonia", "Finland", "France", 
    "Georgia", "Germany", "Greece", "Hungary", "Iceland", "Ireland", "Italy", "Kosovo", "Latvia", "Lithuania", "Luxembourg", "Malta", "Moldova", "Monaco", 
    "Montenegro", "Netherlands", "North Macedonia", "Norway", "Poland", "Portugal", 
    "Romania", "Russian federation", "Serbia", "Slovak Republic", "Slovenia", "Spain", "Sweden", "Switzerland", "Turkiye", "United Kingdom"
)

# Create a new variable Name_europe containing only European countries
management <- management %>%
  mutate(Name_europe = ifelse(Country.Name %in% european_countries, Country.Name, NA))

# View the 'management' dataset to check the updated variable
#view(management)

```

### distribution of the Female share of employment in senior and middle management (%) in European countries

```{r}
# Filter the dataset for only European countries: create e_management
e_management <- subset(management, Country.Name %in% european_countries)
view(e_management)

# Filter the dataset for the most recent year's data for each country
recent_data <- e_management %>%
  group_by(Name_europe) %>%
  filter(Year == max(Year))  # Filter for rows with the maximum Year value for each country

# Create the choropleth map with the filtered recent_data
map <- plot_geo(recent_data, locations = ~Name_europe, locationmode = "country names") %>%
  add_trace(
    z = ~Value,
    text = ~paste("Country: ", Name_europe, "<br>Percentage of Females: ", Value, "%"),
    colorscale = "Viridis",
    colorbar = list(title = "Percentage of Females in Managerial Positions")
  ) %>%
  layout(
    title = "Most Recent Year: Percentage of Females in Managerial Positions by European Countries",
    geo = list(scope = "europe")
  )

# Show the map
map
```

```{r}

# Sort the most recent data by 'Value' in descending order
sorted_recent <- recent_data %>% arrange(desc(Value))

# Extract the highest three values
highest_three <- head(sorted_recent, 3)

# Extract the lowest three values
lowest_three <- tail(sorted_recent, 3)

# Print the highest and lowest three values
cat("Highest Three:\n")
print(highest_three[, c("Name_europe", "Value")])

cat("\nLowest Three:\n")
print(lowest_three[, c("Name_europe", "Value")])

```

```{r}

paygap <- paygap %>%
  mutate(Name_europe = ifelse(Country %in% european_countries, Country, NA))

# Create a copy of the dataset containing only observations with Name_europe
e_paygap <- paygap %>% filter(!is.na(Name_europe))

# Displaying the new dataset
print(e_paygap)

view(e_paygap)
view(e_management)
```

create Secondary_sector in e_paygap
```{r}
e_paygap <- e_paygap |> mutate(Secondary_sector = rowMeans(select(e_paygap, Construction, Mining, Manufacturing), na.rm=TRUE))
view(e_paygap)
```

prepare e_managemnt to make the regression
```{r}

# Convert Year to numeric (if it's stored as character or factor)
e_paygap$Year <- as.numeric(e_paygap$Year)

# Grouping by Country and calculating the mean for the most recent year
e_paygap_mean <- e_paygap %>%
  group_by(Country) %>%
  filter(Year == max(Year)) %>%
  summarize(mean_Secondary_sector = mean(Secondary_sector, na.rm = TRUE))

# Displaying the mean values for the most recent year per country
print(e_paygap_mean)

# Renaming the columns to have the same name for merging
names(e_paygap_mean)[1] <- "Name_europe"  

# Merging based on the Country column to copy mean values
e_management <- merge(e_management, e_paygap_mean, by = "Name_europe", all.x = TRUE)

```

### do a regression
```{r}
# Creating a linear regression model
regression_model <- lm(Value ~ mean_Secondary_sector, data = e_management)

# Summarizing the regression model
summary(regression_model)

```

### create a plot for the previous regression
```{r}
ggplot(e_management, aes(x = Value, y = mean_Secondary_sector)) +
  geom_point() +  # Scatter plot of data points
  geom_smooth(method = "lm", se = FALSE) +  # Regression line
  labs(title = "Linear Regression: Value vs Secondary_sector",
       x = "Value", y = "Secondary_sector")


```

create the variable for the tertiary sector in e_management
```{r}

```


### regression with Tertiary_sector and Value
```{r}

```

### upload dataset about unpaid domestic and care work
```{r}
domestic <- read.csv("Proportion of time spent on unpaid domestic and care work (% of 24 hour day).csv")

# Rename 'Value' column to 'Value2' in the 'domestic' dataset
domestic <- domestic %>%
  rename(Value2 = Value)

# Check the updated column names
print(colnames(domestic))
view(domestic)

```

```{r}

domestic <- domestic %>%
  mutate(Name_europe = ifelse(Country.Name %in% european_countries, Country.Name, NA))

view(domestic)
```

### graph to show the distribution
```{r}
# Filter the dataset for only European countries
e_domestic <- subset(domestic, Country.Name %in% european_countries)
view(e_domestic)

# Create a choropleth map
map <- plot_geo(e_domestic, locations = ~Name_europe, locationmode = "country names") %>%
  add_trace(
    z = ~Value2,
    text = ~paste("Country: ", Name_europe, "<br>Proportion of time spent on unpaid domestic and care work: ", Value2, "%"),
    colorscale = "Viridis",
    colorbar = list(title = "Proportion of time spent on unpaid domestic and care work")
  ) %>%
  layout(
    title = "Proportion of time spent on unpaid domestic and care work",
    geo = list(scope = "europe")
  )

# Show the map
map
```

```{r}
# Filter for the most recent date for each country
most_recent_data_domestic <- e_domestic %>%
  group_by(Name_europe) %>%
  filter(Year == max(Year))  # Filter for rows with the maximum Year value for each country

# Sort the most recent data by 'Value2' in descending order
sorted_most_recent_domestic <- most_recent_data_domestic %>% arrange(desc(Value2))

# Extract the highest three values
highest_three_domestic <- head(sorted_most_recent_domestic, 3)

# Extract the lowest three values
lowest_three_domestic <- tail(sorted_most_recent_domestic, 3)

# Print the highest and lowest three values
cat("Highest Three:\n")
print(highest_three_domestic[, c("Name_europe", "Value2")])

cat("\nLowest Three:\n")
print(lowest_three_domestic[, c("Name_europe", "Value2")])

```

```{r}
#view(e_paygap_mean)
# Merge datasets on 'Name_europe'
merged_dataset <- merge(e_paygap_mean, e_domestic, by = "Name_europe", all = TRUE)

# Perform linear regression
model <- lm(Value2 ~ mean_Secondary_sector, data = merged_dataset)

# Summary of the regression model
summary(model)

```
###graph of the regression
```{r}
# Check the number of rows in datasets
nrow(merged_dataset)
nrow(data.frame(Secondary_sector = merged_dataset$Secondary_sector))  # Check Secondary_sector data

# Check for missing values
summary(merged_dataset$Secondary_sector)  # Check summary statistics
summary(data.frame(Secondary_sector = merged_dataset$Secondary_sector))

# Ensure 'model' is using 'merged_dataset'
summary(model)  # Check if 'model' is based on 'merged_dataset'

# Create a scatter plot with regression line
ggplot(merged_dataset, aes(x = Value2, y = mean_Secondary_sector)) +
  geom_point(color = "black") +  # Scatter plot with black points
  geom_smooth(method = "lm", se = FALSE, color = "blue", size = 1.2) +  # Regression line in red, thicker
  labs(title = "Impact of Value2 on Secondary Sector",
       x = "Value2", y = "Secondary Sector") +  # Labels for the plot
  theme_minimal()  # Aesthetic adjustment to a minimal theme

```

```{r}

```

